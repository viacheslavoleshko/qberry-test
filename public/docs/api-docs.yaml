openapi: 3.0.0
info:
  title: Fridge Master API
  description: "This is API documentation Fridge Master."
servers:
  - url: http://localhost:8000/api
paths:
  /locations:
    get:
      tags:
          - location
      summary: Returns available locations
      operationId: getLocations
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Locations"
  /bookings/{roomId}/calculate:
    post:
      summary: Calculate available blocks for booking
      operationId: calculateBooking
      tags:
        - booking
      parameters:
        - name: roomId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: temperature
          in: query
          description: Value must be in the range of -2 and 2, but not equal to 0 (in Â°C)
          required: true
          schema:
            type: intenger
            format: int32
        - name: volume
          in: query
          description: Value must be more than 1
          required: true
          schema:
            type: intenger
            format: int32
        - name: days
          in: query
          description: Value must be in the range of 1 and 24
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CalculateBooking"
  /bookings/{roomId}:
    post:
      summary: Create new booking order
      operationId: bookingStore
      tags:
        - booking
      parameters:
        - name: roomId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: days
          in: query
          description: Value must be in the range of 1 and 24
          required: true
          schema:
            type: integer
            format: int32
        - name: volume
          in: query
          description: Value must be more than 0
          required: true
          schema:
            type: integer
            format: int32
      responses:
        201:
          description: created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Booking"
        422:
          description: Invalid Order
          content:
            application/json:
              examples:
                Invalid Validation:
                  value: |-
                    {
                        "errors": {
                            "volume": [
                                "The volume must be less than or equal to 6."
                            ]
                        }
                    }
  /my-bookings:
    get:
      summary: Returns users booking orders
      operationId: getMyBookings
      tags:
        - booking
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Bookings"
  /bookings/{bookingId}/access_code:
    get:
      summary: Returns booking access code
      operationId: BookingAccessCode
      tags:
        - booking
      parameters:
        - name: bookingId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: string
  /rooms:
    get:
      summary: Returns available rooms
      operationId: getRooms
      tags:
        - room
      parameters:
        - name: location_id
          in: query
          description: Value must be ID of existing location
          required: true
          schema:
            type: integer
            format: int64
        - name: temperature
          in: query
          description: Temperature in the room
          required: false
          schema:
            type: intenger
            enum:
              - -2
              - -1
              - 1
              - 2
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Rooms"
  /user/login:
    get:
      tags:
      - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
      - name: username
        in: query
        description: The user name for login
        required: true
        schema:
          type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: string
        400:
          description: Invalid username/password supplied
          content: {}
  /user/logout:
    get:
      tags:
      - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
          content: {}
components:
  schemas:
    Location:
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        rooms_count:
          type: integer
          format: int32
        blocks_count:
          type: integer
          format: int32
    Locations:
      type: array
      items:
        $ref: "#/components/schemas/Location"
    CalculateBooking:
      required:
        - volume
      properties:
        days:
            type: integer
            format: int32
        blocks:
          type: integer
          format: int32
        is_available:
          type: boolean
        price:
          type: number
          format: float
    Booking:
      required:
        - room_id
        - volume
        - days
      properties:
        id:
          type: integer
          format: int64
        user_id:
          type: integer
          format: int64
        location_id:
          type: integer
          format: int64
        room_id:
          type: integer
          format: int64
        volume:
          type: number
          format: float
        days:
          type: integer
          format: int32
        debt:
          type: integer
          format: int32
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    Bookings:
      properties:
        data:
          items:
            $ref: "#/components/schemas/Booking"
          type: array
      type: object
    Room:
      required:
        - id
        - location_id
        - temperature
        - is_available
      properties:
        id:
          type: integer
          format: int64
        location_id:
          type: integer
          format: int64
        temperature:
          type: integer
          format: int32
        is_available:
          type: boolean
        blocks_count:
          type: integer
          format: int32
    Rooms:
      type: array
      items:
        $ref: "#/components/schemas/Room"
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        email:
          type: string
        email_verified_at:
          type: string
          format: date-time
        password:
          type: string
        remember_token:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
